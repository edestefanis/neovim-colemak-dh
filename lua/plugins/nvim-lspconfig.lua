--return {
--  -- Mason and Mason LSP config
--  {
--    "williamboman/mason.nvim",
--    config = function()
--      require("mason").setup({
--        ensure_installed = {
--          "sumneko_lua", "kotlin_language_server", -- Correct server name
--        },
--      })
--
--      require('mason-lspconfig').setup({
--        ensure_installed = { "kotlin-language-server" }, -- Install Lua and Kotlin LSP
--      })
--    end
--  },
--  { "williamboman/mason-lspconfig.nvim", config = true },
--  { "prabirshrestha/vim-lsp",            config = true },
--
--  -- nvim-lspconfig
--  {
--    "neovim/nvim-lspconfig",
--    dependencies = {
--      {
--        "folke/lazydev.nvim",
--        ft = "lua", -- only load on lua files
--        opts = {
--          library = {
--            -- See the configuration section for more details
--            -- Load luvit types when the `vim.uv` word is found
--            { path = "${3rd}/luv/library", words = { "vim%.uv" } },
--          },
--        },
--      },
--      { "saghen/blink.cmp" },
--      { "williamboman/mason.nvim" },
--      { "williamboman/mason-lspconfig.nvim" },
--      { "WhoIsSethDaniel/mason-tool-installer.nvim" },
--      { "lvimuser/lsp-inlayhints.nvim", },
--
--    },
--    config = function()
--      -- Bemol brazil LSP
--      function bemol()
--        local bemol_dir = vim.fs.find({ '.bemol' }, { upward = true, type = 'directory' })[1]
--        local ws_folders_lsp = {}
--        if bemol_dir then
--          local file = io.open(bemol_dir .. '/ws_root_folders', 'r')
--          if file then
--            for line in file:lines() do
--              table.insert(ws_folders_lsp, line)
--            end
--            file:close()
--          end
--        end
--
--        for _, line in ipairs(ws_folders_lsp) do
--          vim.lsp.buf.add_workspace_folder(line)
--        end
--      end
--
--      vim.filetype.add({ filename = { Config = "brazil-config" } })
--
--      -- configure lsp inlay hints
--      local ih = require("lsp-inlayhints")
--      ih.setup({
--        only_current_line = true,
--
--        eol = {
--          right_align = true,
--        },
--      })
--
--
--      local capabilities = require('blink.cmp').get_lsp_capabilities()
--      local mason = require("mason")
--      local mason_lspconfig = require("mason-lspconfig")
--      local mason_tool_installer = require("mason-tool-installer")
--
--      mason.setup()
--
--      local mason_ensure_installed = vim.tbl_keys({})
--      vim.list_extend(
--        mason_ensure_installed,
--        {
--          -- place other packages you want to install but not configure with mason here
--          -- e.g. language servers not configured with nvim-lspconfig, linters, formatters, etc.
--        }
--      )
--      mason_tool_installer.setup({
--        ensure_installed = mason_ensure_installed
--      })
--      local lspconfig = require("lspconfig")
--      local util = require("lspconfig.util")
--
--
--      local on_attach = function(client, bufnr)
--        print("here1")
--        local function buf_set_keymap(...)
--          vim.api.nvim_buf_set_keymap(bufnr, ...)
--        end
--        local function buf_set_option(...)
--          vim.api.nvim_buf_set_option(bufnr, ...)
--        end
--
--        buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")
--        local opts = { noremap = true, silent = true }
--
--        buf_set_keymap("n", "gD", "<cmd>Telescope lsp_type_definitions<CR>", opts)
--        buf_set_keymap("n", "gd", "<cmd>Telescope lsp_definitions<CR>", opts)
--        buf_set_keymap("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
--        buf_set_keymap("n", "gh", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
--        buf_set_keymap("n", "gi", "<cmd>Telescope lsp_implementations<CR>", opts)
--        buf_set_keymap("n", "gr", "<cmd>Telescope lsp_references<CR>", opts)
--        buf_set_keymap("n", "[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>", opts)
--        buf_set_keymap("n", "]d", "<cmd>lua vim.diagnostic.goto_next()<CR>", opts)
--        buf_set_keymap("n", "<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>", opts)
--        buf_set_keymap("n", "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<cr>", opts)
--        client.server_capabilities.document_formatting = true
--
--        print("here2")
--        bemol()
--      end
--      lspconfig.tsserver.setup({
--        capabilities = capabilities,
--      })
--      lspconfig.pyright.setup({
--        capabilities = capabilities,
--      })
--      lspconfig.emmet_language_server.setup({
--        capabilities = capabilities,
--      })
--      lspconfig.rust_analyzer.setup({
--        on_attach = on_attach,
--        capabilities = capabilities,
--        filetypes = { "rust" },
--        root_dir = util.root_pattern("Cargo.toml"),
--        settings = {
--          ["rust-analyzer"] = {
--            cargo = {
--              allFeatures = true,
--            },
--          },
--        },
--      })
--      lspconfig.lemminx.setup({
--        capabilities = capabilities,
--        on_attach = on_attach,
--      })
--      vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
--      vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
--      vim.keymap.set("n", "<leader>gd", vim.lsp.buf.definition, {})
--      vim.keymap.set("n", "<leader>gr", vim.lsp.buf.references, {})
--      vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, {})
--
--
--      -- Lua LSP configuration
--      lspconfig.lua_ls.setup({
--        capabilities = capabilities,
--      })
--
--      -- Kotlin LSP configuration
--      --
--
--
--      print(vim.inspect({
--        capabilities = capabilities,
--        cmd = { "kotlin-language-server" },
--        filetypes = { "kotlin" },
--        -- amazon
--        --Root_dir = function(fname) -- root_dir must be a function
--        --  local root_dir = find_root_dir()
--        --  print("Root directory: " .. (root_dir or "None"))
--        --  return root_dir
--        --End,
--        root_dir = lspconfig.util.root_pattern("settings.gradle", "settings.gradle.kts", "build.gradle", "build.gradle.kts", ".git", "packageInfo"),
--        on_attach = function(client, bufnr)
--
--          print("here3")
--          print(vim.inspect(client.server_capabilities))
--          local opts = { noremap = true, silent = true, buffer = bufnr }
--          vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
--          vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
--          vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
--          vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
--          print("here4")
--          bemol()
--        end,
--      }))
--
--
--      require('lspconfig').kotlin_language_server.setup({
--        capabilities = capabilities,
--        cmd = { "kotlin-language-server" },
--        filetypes = { "kotlin" },
--        -- amazon
--        --Root_dir = function(fname) -- root_dir must be a function
--        --  local root_dir = find_root_dir()
--        --  print("Root directory: " .. (root_dir or "None"))
--        --  return root_dir
--        --End,
--        root_dir = lspconfig.util.root_pattern("settings.gradle", "settings.gradle.kts", "build.gradle", "build.gradle.kts", ".git", "packageInfo"),
--        on_attach = function(client, bufnr)
--
--          print("here3")
--          print(vim.inspect(client.server_capabilities))
--          local opts = { noremap = true, silent = true, buffer = bufnr }
--          vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
--          vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
--          vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
--          vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
--          print("here4")
--          bemol()
--        end,
--      })
--      vim.opt.tabstop = 2
--      vim.opt.shiftwidth = 2
--      vim.opt.expandtab = true
--      vim.keymap.set("n", "<space>f", function() vim.lsp.buf.format() end)
--    end
--  },
--}
